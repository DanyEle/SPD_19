
#include <mpi.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//forward declarations
int handle_communication(int my_rank, int number_processes, int my_message, int MAX_MESSAGE_SIZE);


int main(int argc, char ** argv)
{
	int my_rank;

	int number_processes;

	int my_message = 0;

	const int MAX_MESSAGE_SIZE = 1;
	//buffer for receiving messages

	MPI_Init(&argc, &argv);
	//basic communicator
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);

    int mpi_error_code = MPI_Comm_size(MPI_COMM_WORLD, &number_processes);

    mpi_error_code = handle_communication(my_rank, number_processes, my_message, MAX_MESSAGE_SIZE);

    //send to the next process

	MPI_Finalize();

	return 0;

}



int handle_communication(int my_rank, int number_processes, int my_message, int MAX_MESSAGE_SIZE)
{
	printf("I am in process %d \n", my_rank);

	int received_message;

	int mpi_error_code;
	int next_process = (my_rank + 1) % number_processes;
	int previous_process = (my_rank - 1) % number_processes;


	//root, needs to init the communication
	if(my_rank == 0)
	{
		printf("next process at %d is  %d \n", my_rank, next_process);
		printf("previous process at %d is %d out of %d \n", my_rank, previous_process, number_processes);


		//first one needs to send to the next one
		mpi_error_code = MPI_Send(&my_message, 1, MPI_INT, next_process, 789, MPI_COMM_WORLD);
		//then needs to start receiving from the previous one
		mpi_error_code = MPI_Recv(&received_message, MAX_MESSAGE_SIZE, MPI_INT, previous_process, 789, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("Received message at process %d is: %d\n", my_rank, received_message);

	}

	//other processes. need to first receive message from previous process, then send to the next process.
	if(my_rank != 0)
	{
		//printf("next process at %d is  %d \n", my_rank, next_process);
		//printf("previous process at %d is %d \n", my_rank, previous_process);

		mpi_error_code = MPI_Recv(&received_message, MAX_MESSAGE_SIZE, MPI_INT, previous_process, 789, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("Received message at process %d is: %d \n", my_rank, received_message);
		mpi_error_code = MPI_Send(&my_message, sizeof(my_message)+1,MPI_INT, next_process, 789, MPI_COMM_WORLD);

	}



	return 0;

}
