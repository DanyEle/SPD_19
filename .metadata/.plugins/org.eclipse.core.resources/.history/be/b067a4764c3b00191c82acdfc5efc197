
#include <mpi.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//forward declarations
int handle_communication(int my_rank, int number_processes, char * my_message, int MAX_MESSAGE_SIZE);


int main(int argc, char ** argv)
{
	int my_rank;

	int number_processes;

	char * my_message = "Message!";

	const int MAX_MESSAGE_SIZE = 100;
	//buffer for receiving messages

	MPI_Init(&argc, &argv);
	//basic communicator
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);

    int mpi_error_code = MPI_Comm_size(MPI_COMM_WORLD, &number_processes);


    mpi_error_code = handle_communication(my_rank, number_processes, my_message, MAX_MESSAGE_SIZE);


    //send to the next process

	MPI_Finalize();

	return 0;

}



int handle_communication(int my_rank, int number_processes, char * my_message, int MAX_MESSAGE_SIZE)
{
	printf("I am in process %d \n", my_rank);

	char received_message[MAX_MESSAGE_SIZE];

	//root, needs to init the communication
	if(my_rank == 0)
	{
		mpi_error_code = MPI_Send(my_message, strlen(my_message_0_1)+1,MPI_CHAR,1, 789, MPI_COMM_WORLD);
	}
	else
	{

	}


	return 0;

}
